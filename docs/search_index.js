var documenterSearchIndex = {"docs":
[{"location":"#JHistint.jl-Julia-Histopathology-Interface","page":"Home","title":"JHistint.jl - Julia Histopathology Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia interface for implementing the REST APIs available on the Cancer Slide Digital Archive (CDSA) portal for downloading histological images available in The Cancer Genome Atlas (TCGA). The Cancer Slide Digital Archive (CDSA) is a web platform for support, sharing, and analysis of digital pathological data. Currently, it hosts over 23,000 images associated with the data available on \"The Cancer Genome Atlas\" Data Portal. The library includes functions for managing image-processing algorithms for cell segmentation, constructing the adjacency matrix, and interfacing with the J-Space.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Link GitHub repository: JHistint.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Link GitHub repository: J-Space.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"CDSA Portal: Click Here    ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Repository containing the data mapped in the portal: Click Here","category":"page"},{"location":"","page":"Home","title":"Home","text":"Guide to using the APIs: Click Here","category":"page"},{"location":"#Package-Structure","page":"Home","title":"Package Structure","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The case and collection folders store metadata in .json format for individual cases and collections available on the TCGA Data Portal. The collection folder is structured as follows:\ncollectionlist.json = Stores access data (metadata) for collections (Projects in TCGA).\ncollection_name.json = Stores access data (metadata) for a single collection. The .json file is generated based on the collection chosen by the user.\nThe case folder is structured as follows:\ncollection_name.json = Stores all metadata related to cases associated with the collection selected by the user.\nThe slides folder stores histological images related to individual cases. The images are organized based on collection (TCGA-chol, TCGA-esca, etc.), and the individual case being analyzed (TCGA-2H-A9GF, TCGA-2H-A9GG, etc.). Within each folder related to the case, the slides are stored in compressed .zip files. The format of each individual slide is .tif. The folder names related to the cases correspond to the values of the Case ID field listed in the TCGA Data Portal. The names of the .zip files located in each folder refer to the Sample ID attribute associated with the patient. The slide name is given by concatenating the Slide ID and Slide UUID attributes that can be found in the lower section of the web page dedicated to the generic case TCGA-XX-YYYY.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: TCGA-02-0001-01C-01-TS1.zip  \n  - 02 = refers to the TSS (Tissue Source Site).  \n  - 0001 = refers to the code associated with the Participant, an alphanumeric string.  \n  - 01 = refers to the Sample Type. The values associated with tumor samples are in the range 01-09. 10-19 indicates the range for non-diseased normal samples. 20-29 indicates samples currently under control.  \n  - C = refers to the Vial field related to the ordering of the sample in the sample sequence. Values range from A-Z.  \n  - 01 = refers to the Portion field related to the ordering of the analyzed portions associated with a sample. It takes values in the range 01-99.  \n  - TS1 = refers to the Slide field related to the type of image. The values that can be assumed are TS (Top Slide), BS (Bottom Slide), and MS (Middle Slide). The alphanumeric value indicates the slide ordering.","category":"page"},{"location":"#JHistint-Collections","page":"Home","title":"JHistint Collections","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The available collections are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"TCGA-BRCA = Breast Invasive Carcinoma (Breast)\nTCGA-OV = Ovarian Serous Cystadenocarcinoma (Ovary)\nTCGA-LUAD = Lung Adenocarcinoma (Bronchus and Lung)\nTCGA-UCEC = Uterine Corpus Endometrial Carcinoma (Corpus uteri)\nTCGA-GBM = Glioblastoma Multiforme (Brain)\nTCGA-HSNC = Head and Neck Squamous Cell Carcinoma (Larynx, Lip, Tonsil, Gum, Other and unspecified parths of mouth)\nTCGA-KIRC = Kidney Renal Clear Cell Carcinoma (Kidney)\nTCGA-LGG = Brain Lower Grade Glioma (Brain)\nTCGA-LUSC = Lung Squamous Cell Carcinoma (Bronchus and lung)\nTCGA-TCHA = Thyroid Carcinoma (Thyroid gland)\nTCGA-PRAD = Prostate Adenocarcinoma (Prostate gland)\nTCGA-SKCM = Skin Cutaneous Melanoma (Skin)\nTCGA-COAD = Colon Adenocarcinoma (Colon)\nTCGA-STAD = Stomach Adenocarcinoma (Stomach)\nTCGA-BLCA = Bladder Urothelial Carcinoma (Bladder)\nTCGA-LIHC = Liver Hepatocellular Carcinoma (Liver and intrahepatic bile ducts)  \nTCGA-CESC = Cervical Squamous Cell Carcinoma and Endocervical Adenocarcinoma (Cervix uteri)\nTCGA-KIRP = Kidney Renal Papillary Cell Carcinoma (Kidney)\nTCGA-SARC = Sarcoma (Various)\nTCGA-ESCA = Esophageal Carcinoma (Esophagus)\nTCGA-PAAD = Pancreatic Adenocarcinoma (Pancreas)\nTCGA-READ = Rectum Adenocarcinoma (Rectum)\nTCGA-PCPG = Pheochromocytoma and Paraganglioma (Adrenal gland)\nTCGA-TGCT = Testicular Germ Cell Tumors (Testis)\nTCGA-THYM = Thymoma (Thymus)\nTCGA-ACC = Adrenocortical Carcinoma -Adenomas and Adenocarcinomas (Adrenal gland)\nTCGA-MESO = Mesothelioma (Heart, mediastinum and pleura)\nTCGA-UVM = Uveal Melanoma (Eye and adnexa)\nTCGA-KICH = Kidney Chromophobe (Kidney)\nTCGA-UCS = Uterine Carcinosarcoma (Uterus, NOS)\nTCGA-CHOL = Cholangiocarcinoma (Liver and intrahepatic bile ducts, Other and unspecified part of biliary track)\nTCGA-DLBC = Lymphoid Neoplasm Diffuse Large B-cell Lymphoma (Various)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To download a specific collection, just indicate the name of the collection: BRCA, OV, LUAD.","category":"page"},{"location":"#Package-Installation","page":"Home","title":"Package Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The JHistint package is available in the Julia Registries and can be installed as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia > using Pkg\njulia > Pkg.add(\"JHistint\")\njulia > using JHistint","category":"page"},{"location":"","page":"Home","title":"Home","text":"Otherwise, type ] in the Julia REPL and execute:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.8) pkg > add JHistint\n(@v1.8) pkg > using JHistint","category":"page"},{"location":"#Download-Slides-functions-(JHistint.jl)","page":"Home","title":"Download Slides functions (JHistint.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"download_single_collection(collection_name::AbstractString)","category":"page"},{"location":"#JHistint.download_single_collection-Tuple{AbstractString}","page":"Home","title":"JHistint.download_single_collection","text":"download_single_collection(collection_name::AbstractString)\n\nFunction for downloading histological slides associated with a collection available in TCGA.\n\nArguments\n\ncollection_name::AbstractString = Collection of TCGA data to download the histological slides.\n\nNotes\n\nThe function evaluates the collection_name argument, and in case of an invalid collection, considers the configuration in the Config.toml file. The value set in the package is default.\n\n# Examples with valid input\njulia> JHistint.download_single_collection(\"acc\")\njulia> JHistint.download_single_collection(\"bLca\")\n\n# Examples with invalid input\njulia> JHistint.download_single_collection(\"ac\")\njulia> JHistint.download_single_collection(\"\")\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"download_all_collection()","category":"page"},{"location":"#JHistint.download_all_collection-Tuple{}","page":"Home","title":"JHistint.download_all_collection","text":"download_all_collection()\n\nFunction for downloading histological slides associated with all collections available in TCGA.\n\n# Examples with valid input\njulia> JHistint.download_all_collection()\n\n\n\n\n\n","category":"method"},{"location":"#Cell-Segmentation-Slides-functions-(JHistint.jl)","page":"Home","title":"Cell Segmentation Slides functions (JHistint.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"slide_cell_segmentation_without_download(collection_name::AbstractString)","category":"page"},{"location":"#JHistint.slide_cell_segmentation_without_download-Tuple{AbstractString}","page":"Home","title":"JHistint.slide_cell_segmentation_without_download","text":"slide_cell_segmentation_without_download(collection_name::AbstractString)\n\nFunction for performing cell segmentation on histopathological slides present in the JHistint_DB database associated with the collection name provided as an argument. After generating the segmented slide, the function proceeds with constructing and saving the corresponding graph and adjacency matrix.\n\nArguments\n\ncollection_name::AbstractString = Collection of TCGA data to download the histological slides.\n\nNotes\n\nThe function utilizes the JHistint_DB database for performing cell segmentation on the histopathological slides associated with the provided collection name. It generates a segmented slide and constructs a corresponding graph and adjacency matrix. The output files are saved in a user-defined directory. The function may take a considerable amount of time to complete, depending on the size of the slides and the complexity of the segmentation algorithm. For each slide in the database, cell segmentation is performed using the apply_segmentation_without_download function, and the path where the result is saved is stored in the database using the load_seg_slide function. The segmentation process is defined in 4 steps:\n\nLOAD SLIDE ... (slide_id)\nAPPLY SEGMENTATION ... (slide_id)\nBUILD GRAPH ... (slide_id)\nBUILD & SAVE ADJACENCY MATRIX ... (slide_id)\nJ-SPACE features ... (slide_id)\n\nThe adjacency matrix is saved in the same directory as the original image in text format. Finally, a confirmation message is printed for each segmented slide. Unlike the slide_cell_segmentation_with_download function, this function does not involve the creation and download of the segmented image.\n\n# Examples with valid input\njulia> JHistint.slide_cell_segmentation_without_download(\"acc\")\njulia> JHistint.slide_cell_segmentation_without_download(\"bLca\")\n\n# Examples with invalid input\njulia> JHistint.slide_cell_segmentation_without_download(\"ac\")\njulia> JHistint.slide_cell_segmentation_without_download(\"\")\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"slide_cell_segmentation_with_download(collection_name::AbstractString)","category":"page"},{"location":"#JHistint.slide_cell_segmentation_with_download-Tuple{AbstractString}","page":"Home","title":"JHistint.slide_cell_segmentation_with_download","text":"slide_cell_segmentation_with_download(collection_name::AbstractString)\n\nFunction for performing cell segmentation on histopathological slides present in the JHistint_DB database associated with the collection name provided as an argument. The function downloads the segmented slide, which is placed in the same directory as the original slide. After generating the segmented slide, the function proceeds with constructing and saving the corresponding graph and adjacency matrix.\n\nArguments\n\ncollection_name::AbstractString = TCGA data collection for which to perform cell segmentation.\n\nNotes\n\nThe function utilizes the JHistint_DB database for performing cell segmentation on the histopathological slides associated with the provided collection name. It generates a segmented slide and constructs a corresponding graph and adjacency matrix. The output files are saved in a user-defined directory. The function may take a considerable amount of time to complete, depending on the size of the slides and the complexity of the segmentation algorithm. For each slide in the database, cell segmentation is performed using the apply_segmentation_with_download function, and the path where the result is saved is stored in the database using the load_seg_slide function. The segmentation process is similar to that described in the slide_cell_segmentation_without_download function, with the added step of downloading the segmented image and placing it in the same directory as the original slide. The segmentation process is defined in 6 steps:\n\nLOAD SLIDE ... (slide_id)\nAPPLY SEGMENTATION ... (slide_id)\nBUILD SEGMENTED SLIDE ... (slide_id)\nBUILD GRAPH ... (slide_id)\nBUILD & SAVE ADJACENCY MATRIX ... (slide_id)\nSAVE SEGMENTED SLIDE ... (slide_id)\nJ-SPACE features ... (slide_id)\n\nThe adjacency matrix is saved in text format in the same directory as both the original and segmented images. Finally, a confirmation message is printed for each segmented slide.\n\n# Examples with valid input\njulia> JHistint.slide_cell_segmentation_with_download(\"acc\")\njulia> JHistint.slide_cell_segmentation_with_download(\"bLca\")\n\n# Examples with invalid input\njulia> JHistint.slide_cell_segmentation_with_download(\"ac\")\njulia> JHistint.slide_cell_segmentation_with_download(\"\")\n\n\n\n\n\n","category":"method"},{"location":"#Support-Functions-for-Cell-Segmentation-(segmentationManager.jl)","page":"Home","title":"Support Functions for Cell Segmentation (segmentationManager.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"apply_segmentation_without_download(slide_info::Tuple{String, Vector{UInt8}, String})","category":"page"},{"location":"#JHistint.apply_segmentation_without_download-Tuple{Tuple{String, Vector{UInt8}, String}}","page":"Home","title":"JHistint.apply_segmentation_without_download","text":"apply_segmentation_without_download(slide_info::Tuple{String, Vector{UInt8}, String})\n\nThe function performs the segmentation of a histological image, generates its corresponding graph, and translates it into a symmetric adjacency matrix with only 0s and 1s.\n\nArguments\n\nslide_info::Tuple{String, Vector{UInt8}, String}: A tuple containing the slide ID, the image obtained from the DB, and the path of the original image file.\n\nReturn values\n\nfilepath_matrix: The path where the adjacency matrix is stored in .txt format.\nmatrix: The adjacency matrix constructed from the segmentation.\n\nNotes\n\nThe function uses the watershed segmentation algorithm to segment the image into different groups of pixels. Segmentation is performed using a feature transformation of the image (feature_transform) and labeling of connected components. The distance between the different regions is then calculated, and an adjacency graph of the regions is constructed using the region_adjacency_graph function. The resulting graph is then transformed into an adjacency matrix using the weighted_graph_to_adjacency_matrix function and saved to the path of the original image.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"apply_segmentation_with_download(slide_info::Tuple{String, Vector{UInt8}, String})","category":"page"},{"location":"#JHistint.apply_segmentation_with_download-Tuple{Tuple{String, Vector{UInt8}, String}}","page":"Home","title":"JHistint.apply_segmentation_with_download","text":"apply_segmentation_with_download(slide_info::Tuple{String, Vector{UInt8}, String})\n\nThe function performs segmentation of a histological image, saves the segmented image in .tif format, generates the corresponding graph, and translates it into an adjacency matrix.\n\nArguments\n\nslide_info::Tuple{String, Vector{UInt8}, String}: Tuple containing the slide ID, the image itself obtained from the DB, and the path of the original image file.\n\nReturn values\n\nfilepath_seg: The path where the segmented image is stored in .tif format.\nfilepath_matrix: The path where the graph is stored in .txt format.\nmatrix: The adjacency matrix constructed from the segmentation.\n\nNotes\n\nThe function uses the watershed segmentation algorithm to segment the image into different groups of pixels. Segmentation is performed using an image feature transformation (feature_transform) and connected component labeling. The distance between different regions is then calculated, and an adjacency graph of the regions is constructed using the region_adjacency_graph function. The obtained graph is transformed into an adjacency matrix using the weighted_graph_to_adjacency_matrix function, which is saved in the path of the original image. Finally, a segmented .tif image is saved, and the path of the segmented slide file is returned.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"save_adjacency_matrix(matrix::Matrix{Int64}, filepath_matrix::AbstractString)","category":"page"},{"location":"#JHistint.save_adjacency_matrix-Tuple{Matrix{Int64}, AbstractString}","page":"Home","title":"JHistint.save_adjacency_matrix","text":"save_adjacency_matrix(matrix::Matrix{Int64}, filepath_matrix::AbstractString)\n\nFunction to save an adjacency matrix represented as an integer matrix to a text file.\n\nArguments:\n\nmatrix::Matrix{Int64}: The integer matrix representing the adjacency matrix.\nfilepath_matrix::AbstractString: The file path represented as a string indicating where to save the matrix.\n\nNotes\n\nThe function opens the file specified by the filepath_matrix path in write mode and writes the matrix in adjacency matrix format, where each row represents the adjacent nodes of a node. The numbers in the matrix are separated by spaces.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"weighted_graph_to_adjacency_matrix(G::SimpleWeightedGraph{Int64, Float64}, n::Int64)","category":"page"},{"location":"#JHistint.weighted_graph_to_adjacency_matrix-Tuple{SimpleWeightedGraph{Int64, Float64}, Int64}","page":"Home","title":"JHistint.weighted_graph_to_adjacency_matrix","text":"weighted_graph_to_adjacency_matrix(G::SimpleWeightedGraph{Int64, Float64}, n::Int64)\n\nConverts a weighted graph represented as a SimpleWeightedGraph into an unweighted adjacency matrix.\n\nArguments:\n\nG::SimpleWeightedGraph{Int64, Float64}: Weighted graph represented as a SimpleWeightedGraph with integer vertex labels and floating-point edge weights.\nn::Int64: Number of nodes in the adjacency matrix.\n\nReturn value:\n\nadjacency_matrix: Matrix{Int64} adjacency matrix.\n\nNotes:\n\nThe function returns an n x n adjacency matrix representing the unweighted graph. If nodes i and j are adjacent, the adjacency matrix will contain a value of 1 at position (i,j) and (j,i). Otherwise, the adjacency matrix will contain a value of 0.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"get_random_color(seed)","category":"page"},{"location":"#JHistint.get_random_color-Tuple{Any}","page":"Home","title":"JHistint.get_random_color","text":"get_random_color(seed)\n\nFunction to return a random 8-bit RGB format color, using a specified seed.\n\nArguments\n\nseed: An integer used to initialize the random number generator. If two calls to the function use the same seed, the same color will be generated.\n\nReturn value\n\nThe function returns a random 8-bit RGB format color.\n\n\n\n\n\n","category":"method"},{"location":"#DB-Support-Functions-(dbManager.jl)","page":"Home","title":"DB Support Functions (dbManager.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"insert_record_DB(col_name::AbstractString,\n                        cas_name::AbstractString,\n                        tcga_case_id::AbstractString,\n                        sin_cas_name::AbstractString,\n                        tcga_slide_id::AbstractString,\n                        link_slide::AbstractString,\n                        filepath_zip::AbstractString,\n                        filepath_svs::AbstractString)","category":"page"},{"location":"#JHistint.insert_record_DB-NTuple{8, AbstractString}","page":"Home","title":"JHistint.insert_record_DB","text":"insert_record_DB(col_name::AbstractString,\n                      cas_name::AbstractString,\n                      tcga_case_id::AbstractString,\n                      sin_cas_name::AbstractString,\n                      tcga_slide_id::AbstractString,\n                      link_slide::AbstractString,\n                      filepath_zip::AbstractString,\n                      filepath_svs::AbstractString)\n\nFunction for storing in the JHistint_DB database the information associated with each slide downloaded from the Cancer Digital Slide Archive (CDSA).\n\nArgomenti\n\ncol_name::AbstractString = Collection name.\ncas_name::AbstractString = Case name, which corresponds to the CASE-NAME displayed by the package.\ntcga_case_id::AbstractString = ID used by TCGA to identify the case.\nsin_cas_name::AbstractString = Name of the individual slide, which corresponds to the SLIDE-ID displayed by the package.\ntcga_slide_id::AbstractString = ID used by TCGA to identify the slide.\nlink_slide::AbstractString = Link to the APIs for downloading the slide.\nfilepath_zip::AbstractString = Path where the .zip file is stored.\nfilepath_svs::AbstractString = Path where the .tif file is stored.\n\nNotes\n\nThe JHistint_DB database is used for storing the information associated with each slide downloaded from the CDSA. The function takes a dictionary containing the information associated with the slide and stores it in the database. Data available in the JHistint_DB database for each slide:\n\ncollection_name TEXT = Name of the collection.\ncase_name TEXT = Name of the case.\nTCGA_caseID TEXT = ID used by TCGA to identify the case.\nslide_ID TEXT = Name of the individual slide case.\nTCGA_slideID TEXT UNIQUE = ID used by TCGA to identify the slide, UNIQUE prevents duplicates from being generated.\nslide_path_folder_zip TEXT = Path where the .zip file is stored.\nslide_path_folder_svs TEXT = Path where the .tif file is stored.\nslide_path_api TEXT = Link to the API for downloading the slide.\nslide_path_folder_seg TEXT = Path where the segmented .tif file is stored.\nslide_svs BLOB = Histopathological slide (image).\nslide_info_TSS TEXT = Slide information - Tissue Source Site.\nslide_info_participant_code TEXT = Slide information - Participant Code, alphanumeric string.\nslide_info_sample_type TEXT = Slide information - Sample Type. The values associated with tumor samples are in the range 01-09. 10-19 indicates the range for non-diseased normal samples. 20-29 indicates samples currently under control.\nslide_info_vial TEXT = Slide information - Vial. Related to the ordering of the sample in the sequence of samples. The values range from A-Z.\nslide_info_portion TEXT = Slide information - Portion. Related to the ordering of the analyzed portions associated with a sample. Takes values in the range 01-99.\nslide_info_type TEXT = Slide information - Image Type. The possible values are TS (Top Slide), BS (Bottom Slide), and MS (Middle Slide). The alphanumeric value indicates the ordering of the slide.\nslide_path_folder_matrix TEXT = Path where the adjacency matrix .txt file is stored.\nmatrix_data BLOB = Adjacency matrix.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"query_extract_slide_svs(collection_name::AbstractString)","category":"page"},{"location":"#JHistint.query_extract_slide_svs-Tuple{AbstractString}","page":"Home","title":"JHistint.query_extract_slide_svs","text":"query_extract_slide_svs(collection_name::AbstractString)\n\nThe function queries the JHistint_DB and extracts the list of slides associated with the collection name provided as an argument.\n\nArguments\n\ncollection_name::AbstractString: Name of the slide collection to search for in the JHistint_DB.\n\nReturn value\n\nslide_list: List of tuples, each of which contains the ID of the slide, the .svs file of the slide, and the path of the folder containing the .svs file.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"load_seg_slide(filepath_seg::AbstractString, filepath_matrix::AbstractString, matrix::Matrix{Int64}, slide_id::AbstractString)","category":"page"},{"location":"#JHistint.load_seg_slide-Tuple{AbstractString, AbstractString, Matrix{Int64}, AbstractString}","page":"Home","title":"JHistint.load_seg_slide","text":"load_seg_slide(filepath_seg::AbstractString, filepath_matrix::AbstractString, matrix::Matrix{Int64}, slide_id::AbstractString)\n\nThe function updates the JHistint_DB with the path of the segmented image file, the path of the adjacency matrix file in text format, and the matrix itself.\n\nArguments\n\nfilepath_seg::AbstractString: Path of the segmented image file to add to the DB.\nfilepath_matrix::AbstractString: Path of the adjacency matrix file.\nmatrix::Matrix{Int64}: Adjacency matrix.\nslide_id::AbstractString: ID of the slide to update with the segmented image information.\n\n\n\n\n\n","category":"method"},{"location":"#API-Support-Functions-(apiManager.jl)","page":"Home","title":"API Support Functions (apiManager.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"download_collection_values(filepath::AbstractString)","category":"page"},{"location":"#JHistint.download_collection_values-Tuple{AbstractString}","page":"Home","title":"JHistint.download_collection_values","text":"download_collection_values(filepath::AbstractString)\n\nFunction for downloading data from collections available in TCGA.\n\nArguments\n\nfilepath::AbstractString = Path where to save the obtained .json file from the API available in CDSA.\n\nNotes\n\nThe API requires the definition of parentType and parentId. parentId specifies the identifier of the collection. The collection of images associated with TCGA is identified by the code: 5b9ef8e3e62914002e454c39. The use of limit=0 sets the absence of limits in the queried file, ensuring the complete download of the file. The API belongs to the category for managing the folders stored in the repository. The downloaded file is .json.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"extract_collection_values(filepath::AbstractString)","category":"page"},{"location":"#JHistint.extract_collection_values-Tuple{AbstractString}","page":"Home","title":"JHistint.extract_collection_values","text":"extract_collection_values(filepath::AbstractString)\n\nFunction to extract the values of data collections from the .json file downloaded by the download_collection_values function.\n\nArguments\n\nfilepath::AbstractString = Path where the collectionlist.json file is stored.\n\nReturn value\n\ncollection_values::Array{String} = List of data collections available in TCGA.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"download_project_infos(filepath::AbstractString, collection_name::AbstractString)","category":"page"},{"location":"#JHistint.download_project_infos-Tuple{AbstractString, AbstractString}","page":"Home","title":"JHistint.download_project_infos","text":"download_project_infos(filepath::AbstractString, collection_name::AbstractString)\n\nFunction to download metadata associated with the selected collection at startup.\n\nArguments\n\nfilepath::AbstractString = Path to save the .json file associated with the collection. The file is indicated\n\nwith the wording collection_name.json.\n\ncollection_name::AbstractString = Name of the collection from which to download the slides.\n\nNotes\n\nThe API requires the definition of parentType, parentId, and name. The name attribute identifies the name of the collection from which you want to retrieve data (e.g., chol, esca, etc.). The API belongs to the category for managing the folders stored in the repository. The downloaded file is .json.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"extract_project_id(filepath::AbstractString)","category":"page"},{"location":"#JHistint.extract_project_id-Tuple{AbstractString}","page":"Home","title":"JHistint.extract_project_id","text":"extract_project_id(filepath::AbstractString)\n\nFunction to extract the id value from the metadata of the collection selected at startup.\n\nArguments\n\nfilepath::AbstractString = Path where the collection_name.json file is stored.\n\nReturn value\n\nproject_id = id of the collection.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"getCasesForProject(filepath_case::AbstractString, project_id::AbstractString)","category":"page"},{"location":"#JHistint.getCasesForProject-Tuple{AbstractString, AbstractString}","page":"Home","title":"JHistint.getCasesForProject","text":"getCasesForProject(filepath_case::AbstractString, project_id::AbstractString)\n\nFunction to download metadata associated with the cases of the selected collection at startup.\n\nArguments\n\nfilepath::AbstractString = Path where to save the .json file associated with the cases of the collection. The file is indicated with the term collection_name.json.\nproject_id::AbstractString = id of the collection.\n\nReturn values\n\ncasesID_values = List of id of all the cases in the collection.\ncasesNAME_values = List of name of all the cases in the collection.\n\nNotes\n\nThe API requires the definition of parentType and parentId. The parentType attribute is set to folder given the structure of the repository. The parentId is set by defining the identifier of the chosen collection. The downloaded file is .json.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"download_zip(link::AbstractString, filepath::AbstractString)","category":"page"},{"location":"#JHistint.download_zip-Tuple{AbstractString, AbstractString}","page":"Home","title":"JHistint.download_zip","text":"download_zip(link::AbstractString, filepath::AbstractString)\n\nFunction for downloading histological slides in .zip format associated with the cases of the selected collection at startup.\n\nArguments\n\nlink::AbstractString = URL to access the API for slide download.\nfilepath::AbstractString = Path to save the .zip file.\n\n\n\n\n\n","category":"method"},{"location":"#ZIP-Support-Functions-(zipManager.jl)","page":"Home","title":"ZIP Support Functions (zipManager.jl)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"extract_slide(filepath_zip::AbstractString)","category":"page"},{"location":"#JHistint.extract_slide-Tuple{AbstractString}","page":"Home","title":"JHistint.extract_slide","text":"extract_slide(filepath_zip::AbstractString)\n\nFunction to extract the contents of .zip files downloaded from CDSA.\n\nArguments\n\nfilepath_zip::AbstractString = Path where the .zip file for the individual case is saved.\n\n\n\n\n\n","category":"method"}]
}
